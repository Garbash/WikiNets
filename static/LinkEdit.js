// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var LinkEdit;
    return LinkEdit = (function(_super) {
      __extends(LinkEdit, _super);

      function LinkEdit(options) {
        this.options = options;
        this.addField = __bind(this.addField, this);
        LinkEdit.__super__.constructor.call(this);
      }

      LinkEdit.prototype.init = function(instances) {
        var _this = this;
        this.dataController = instances['local/Neo4jDataController'];
        this.graphModel = instances['GraphModel'];
        this.graphModel.on("change", this.update.bind(this));
        this.graphView = instances['GraphView'];
        this.selection = instances["LinkSelection"];
        this.selection.on("change", this.update.bind(this));
        this.listenTo(instances["KeyListener"], "down:16:80", function() {
          return _this.$el.toggle();
        });
        instances["Layout"].addPlugin(this.el, this.options.pluginOrder, 'Link Edit', true);
        return this.Create = instances['local/Create'];
      };

      LinkEdit.prototype.update = function() {
        var $container, blacklist, selectedLinks,
          _this = this;
        this.$el.empty();
        selectedLinks = this.selection.getSelectedLinks();
        $container = $("<div class=\"node-profile-helper\"/>").appendTo(this.$el);
        blacklist = ["selected", "source", "target", "strength", "_type"];
        return _.each(selectedLinks, function(link) {
          var $linkDiv, $linkEdit, header;
          $linkDiv = $("<div class=\"node-profile\"/>").appendTo($container);
          header = link._type;
          $("<div class=\"node-profile-title\">" + header + "</div>").appendTo($linkDiv);
          _.each(link, function(value, property) {
            var makeLinks;
            value += "";
            if (blacklist.indexOf(property) < 0) {
              if (property === "start" && _this.graphView.findText(link.source)) {
                makeLinks = value + " \"" + _this.graphView.findText(link.source) + "\"";
              } else if (property === "end" && _this.graphView.findText(link.target)) {
                makeLinks = value + " \"" + _this.graphView.findText(link.target) + "\"";
              } else if (value != null) {
                makeLinks = value.replace(/((https?|ftp|dict):[^'">\s]+)/gi, "<a href=\"$1\" target=\"_blank\" style=\"target-new: tab;\">$1</a>");
              } else {
                makeLinks = value;
              }
              return $("<div class=\"node-profile-property\">" + property + ": " + makeLinks + "</div>").appendTo($linkDiv);
            }
          });
          $linkEdit = $("<input id=\"LinkEditButton" + link['_id'] + "\" class=\"LinkEditButton\" type=\"button\" value=\"Edit this link\">").appendTo($linkDiv);
          return $linkEdit.click(function() {
            return _this.editLink(link, $linkDiv, blacklist);
          });
        });
      };

      LinkEdit.prototype.editLink = function(link, linkDiv, blacklist) {
        var $linkMoreFields, header, linkInputNumber,
          _this = this;
        console.log("Editing link: " + link['_id']);
        linkInputNumber = 0;
        header = link._type;
        linkDiv.html("<div class=\"node-profile-title\">Editing " + header + " (id: " + link['_id'] + "; start: " + link.start + ", end: " + link.end + ")</div><form id=\"Link" + link['_id'] + "EditForm\"></form>");
        _.each(link, function(value, property) {
          var newEditingFields;
          if (blacklist.indexOf(property) < 0 && ["_id", "Last_Edit_Date", "Creation_Date", "start", "end"].indexOf(property) < 0) {
            newEditingFields = "<div id=\"Link" + link['_id'] + "EditDiv" + linkInputNumber + "\" class=\"Link" + link['_id'] + "EditDiv\">\n  <input style=\"width:80px\" id=\"Link" + link['_id'] + "EditProperty" + linkInputNumber + "\" value=\"" + property + "\" class=\"propertyLink" + link['_id'] + "Edit\"/> \n  <input style=\"width:80px\" id=\"Link" + link['_id'] + "EditValue" + linkInputNumber + "\" value=\"" + value + "\" class=\"valueLink" + link['_id'] + "Edit\"/> \n  <input type=\"button\" id=\"removeLink" + link['_id'] + "Edit" + linkInputNumber + "\" value=\"x\" onclick=\"this.parentNode.parentNode.removeChild(this.parentNode);\">\n</div>";
            $(newEditingFields).appendTo("#Link" + link['_id'] + "EditForm");
            return linkInputNumber = linkInputNumber + 1;
          }
        });
        $linkMoreFields = $("<input id=\"moreLink" + link['_id'] + "EditFields\" type=\"button\" value=\"+\">").appendTo(linkDiv);
        return $linkMoreFields.click(function() {
          _this.addField(linkInputNumber, "Link" + link['_id'] + "Edit");
          return linkInputNumber = linkInputNumber + 1;
        });
      };

      LinkEdit.prototype.addField = function(inputIndex, name, defaultKey, defaultValue) {
        var $row;
        if (!(defaultKey != null)) {
          defaultKey = "propertyEx";
        }
        if (!(defaultValue != null)) {
          defaultValue = "valueEx";
        }
        $row = $("<div id=\"" + name + "Div" + inputIndex + "\" class=\"" + name + "Div\">\n<input style=\"width:80px\" name=\"property" + name + inputIndex + "\" placeholder=\"" + defaultKey + "\" class=\"property" + name + "\">\n<input style=\"width:80px\" name=\"value" + name + inputIndex + "\" placeholder=\"" + defaultValue + "\" class=\"value" + name + "\">\n<input type=\"button\" id=\"remove" + name + inputIndex + "\" value=\"x\" onclick=\"this.parentNode.parentNode.removeChild(this.parentNode);\">\n</div>");
        return $("#" + name + "Form").append($row);
      };

      return LinkEdit;

    })(Backbone.View);
  });

}).call(this);
